#!/usr/bin/env python3
from __future__ import (absolute_import, division, print_function,
                        unicode_literals)
from datetime import datetime, timedelta
import os
import re

# start of an algorithm
algdeclare = re.compile(r'^Algorithm:\s+(.+)\s+v(\d+)$')
algstart = re.compile(r'^Execution Date:\s+(.+)$')
algparam = re.compile(r'^Name:\s+(.+),\s+Value:\s+(.*),\s+Default\?:\s+(.+),\s+Direction:\s+(Input|Output|InOut)\s*$')

# Example: 2016-Sep-21 13:26:18
timeformat = '%Y-%b-%d %H:%M:%S'
delta_default = '?:??:??'

class Property:
    def __init__(self, line):
        match = algparam.match(line)
        self.name = match.group(1)
        self.value = match.group(2)
        self.isDefault = match.group(3)
        if self.isDefault == 'Yes':
            self.isDefault = True
        else:
            self.isDefault = False
        self.direction = match.group(4)


    def __str__(self):
        if self.isDefault:
            return ''
        if self.direction == 'Output':
            return ''

        return '%s=\'%s\'' % (self.name, self.value)

class Algorithm:
    def __init__(self, lines):
        match = algdeclare.match(lines[0])
        self.name = match.group(1)
        self.version = match.group(2)
        match = algstart.match(lines[1])
        self.startdate = datetime.strptime(match.group(1), timeformat)
        self.delta = delta_default

        # everything else is a property
        self.props = []
        for line in lines[2:]:
            self.props.append(Property(line))
        self.props = [param for param in self.props if not param.isDefault]
        self.props = [param for param in self.props # ignore output props
                      if param.direction != 'Output']


    def descr(self, level):
        if level == 'full':
            params = self.__full()
        elif level == 'medium':
            params = self.__medium()
        else:
            raise ValueError('Do not understand level=\'%s\'' % level)

        return self.name+'(' + ', '.join(params) + ')'

    def __full(self):
        return [str(param) for param in self.props]

    def __medium(self):
        allowed = ['InputWorkspace', 'Workspace', 'Filename',
                   'RHSWorkspace', 'LHSWorkspace']
        params = [param for param in self.props if param.name in allowed]
        params = [str(param) for param in params]

        #if len(params) > 1:
        #    params = [params[0]]

        if len(params) != len(self.props):
            params.append('...')

        return params

def parseLog(filename):
    print('parsing', filename)

    # proper log line
    logline = re.compile(r'^(.+)-\[(Information|Notice|Warning|Error)\]\s+(.+)')

    algorithms = []

    with open(filename, 'r') as handle:
        alglines = []
        for line in handle:
            line = line.strip()
            match = logline.match(line)
            if match:
                stuff = match.group(3).strip()
                if algdeclare.match(stuff):
                    if len(alglines) > 0:
                        algorithms.append(Algorithm(alglines))
                    alglines = [stuff]
                elif algstart.match(stuff):
                    alglines.append(stuff)
                elif algparam.match(stuff):
                    alglines.append(stuff)
                elif stuff in ['Parameters:',
                               'Execution Duration: -1 seconds']:
                    pass
                elif ' successful, Duration ' in stuff:
                    pass
                else:
                    pass
                    #print("fell through:", stuff)
        if len(alglines) > 0:
            algorithms.append(Algorithm(alglines))

    return algorithms

if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(description='Get timing and information of a reduction log')
    parser.add_argument('file',
                        help='Log file to parse')
    parser.add_argument('--minutes', default='0', type=int,
                        help='Minimum number of minutes for algorithm to take DEFAULT=\'%(default)s\'')
    parser.add_argument('--seconds', default='30', type=int,
                        help='Minimum number of seconds for algorithm to take DEFAULT=\'%(default)s\'')
    parser.add_argument('--allparams', action='store_true',
                        help='Show all parameters that are not their default values')

    args=parser.parse_args()

    data = parseLog(os.path.abspath(args.file))

    # calculate execution time - last one has unknown duration
    for i in range(len(data)-1):
        data[i].delta = data[i+1].startdate - data[i].startdate

    # filter for algorithms to print
    if args.minutes > 0 or args.seconds > 0:
        deltamin = timedelta(minutes=args.minutes, seconds=args.seconds)
        data = [item for item in data if item.delta != delta_default]
        data = [item for item in data if item.delta > deltamin]
        print('Algorithms that took longer than %02dh%02dm%02ds' %
              (0, args.minutes, args.seconds))

    # print the details
    tableformat = '%8s %9s  %s'
    print(tableformat % ('start', 'duration', 'algorithm'))
    for item in data:
        if args.allparams:
            descr = item.descr('full')
        else:
            descr = item.descr('medium')

        print(tableformat % (item.startdate.strftime('%H:%M:%S'),
                             item.delta, descr))
